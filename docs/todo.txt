
- [done] document rowreduce

- [done] change merge to mergereduce, implement merge as cat then mergereduce

- [done] implement aggregate

- [done] implement recordreduce

- [done] implement rowmap

- [done] implement recordmap

- [done] implement rowmapmany

- [done] implement recordmapmany

- [done] implement setfields

- [done] implement pushfields

- [done] implement skip - discard first n rows, including header

- [won't do] modify fromcsv, frompickle, add header argument

- [won't do] modify tocsv, topickle, add writeheader argument

- [done] implement fromtext(filename, header=['lines'])

- [done] document fromtext

- [won't do] implement stringreplace as a conversion function

- [won't do] implement stringsubstring as a conversion function

- [done] change signature of convert, support signature for single field conversion, also applying methods

- [won't do] implement trim as a conversion function

- [won't do] implement stripstring as a conversion function

- [done] implement totext(table, filename, template, prologue=None, epilogue=None)

- [done] implement appendtext(table, filename, template, prologue=None, epilogue=None)

- [done] review split behaviour when there are more splits than fields

- [done] review capture behaviour when there are more splits than fields

- [done] implement extendfields

- [done] implement unpack, or some other way to go from a single field containing list or tuple values to multiple fields

- [done] review aggregate behaviour with no reducer function - produce list? (like recast)

- [done] review mergereduce behaviour - set or list?

- [done] implement join (inner equijoin) with key argument

- [done] implement join (inner equijoin) without key argument (natural join) 

- [done] implement left outer join

- [done] implement right outer join

- [done] implement full outer join

- document leftjoin, rightjoin, outerjoin

- refactor join functions

- implement crossjoin

- implement antijoin

- implement filldown

- implement fillup

- implement fillright? 

- implement fillleft?

- implement rangefacet/bin/segregate/partition/... - facet by numerical field into any number of bins or by a given interval size?

- implement rangeaggregate/binaggregate/segagg/partitionaggregate ... aggregate by numerical field that has been partitioned

- partitioning of alpha fields?

- values on a combination of fields

- modify sort to use merge sort above a given buffer size

- implement cachetag for all view classes

- modify sort to keep cached data and check cachetag values

- [done] implement setfields

- implement selectlen - select by row length

- implement stringjoin as aggregation function (or can you just pass ', '.join?)

- implement missingness

- implement transpose

- check how cat and cut handle long/short rows; are they using itemgetter where possible?

- implement rowgroupby? generate sequence of key/row iterator pairs?

- implement recordgroupby?

- implement pivot?

- implement crosstab?

- implement string lengths as utility function

- (0.3) implement string patterns as utility function

- (0.3) implement hash (lookup) alternatives to all join and other sort-dependent functions

- (0.3) implement provenance trace

- (0.3) implement petl.interactive with cache wrappers

- (0.3) implement petl.fluent
