Glossary - Terms for Data Transformation
========================================

This glossary is an attempt to construct a more-or-less consistent
terminology for transformations on tables of data, and other related
operations. It's also an attempt to identify a useful and convenient
set of *primitive* transformation operations, i.e., the fundamental
operations in terms of which all other transformations can be
expressed.

Where possible, terminology used in other projects/tools for
equivalent or similar operations is given in the "Implementations"
sub-sections.

Because so many of these terms have been used in a variety of
contexts, sometimes with very different senses, there is no hope of
creating a terminology that is both intuitive and acceptable to
everyone. However, I've tried in the "Discussion" sub-sections to give
my rationale for choosing each particular term. Feel free to argue
with me and present alternatives.

Cut
---

**Definition** 

The Cut transformation maps each row in the input to a single row in
the output, such that some fields may be omitted from rows in the
output, and fields may also be re-ordered.

**Example**

Input:

+-------+-------+-------+
| 'foo' | 'bar' | 'baz' |
+=======+=======+=======+
| 'A'   | 1     | True  |
+-------+-------+-------+
| 'B'   | 2     | False |
+-------+-------+-------+

Transformation: Cut, selecting fields ('baz', 'foo').

Output:

+-------+-------+
| 'baz' | 'foo' |
+=======+=======+
| True  | 1     |
+-------+-------+
| False | 2     |
+-------+-------+

**Discussion**

"Cut" is used in csvkit by analogy with the linux "cut" command. TODO explain rationale for supporting "Cut". 

**Implementations** 

- csvcut in csvkit
- ...

Slice
-----

**Definition**

Select a continuous subsequence of data rows from an input table.

**Example**

Input:

+-------+-------+-------+
| 'foo' | 'bar' | 'baz' |
+=======+=======+=======+
| 'A'   | 1     | True  |
+-------+-------+-------+
| 'B'   | 2     | False |
+-------+-------+-------+
| 'C'   | 4     | False |
+-------+-------+-------+
| 'F'   | 7     | True  |
+-------+-------+-------+

Transformation: Slice input, selecting rows from 1 to 2.

Output:

+-------+-------+-------+
| 'foo' | 'bar' | 'baz' |
+=======+=======+=======+
| 'B'   | 2     | False |
+-------+-------+-------+
| 'C'   | 4     | False |
+-------+-------+-------+

**Discussion**

N.B., this operation is about slicing data rows, so 0 (zero) indexes
the first data row, and not the header row.

**Implementations**

TODO

Cat
---

**Definition**

Concatenate two or more input tables into a single output table. Input
tables may have different fields, in which case the fields in the
output table are the union of the fields in the inputs, and any
missing fields in input rows are padded with a configurable value.

**Example**

Input 1:

+-------+-------+
| 'foo' | 'bar' |
+=======+=======+
| 1     | 'A'   |
+-------+-------+
| 2     | 'B'   |
+-------+-------+

Input 2:

+-------+-------+
| 'bar' | 'baz' |
+=======+=======+
| 'C'   | True  |
+-------+-------+
| 'D'   | False |
+-------+-------+

Transformation: Cat inputs, padding missing fields with value None.

Output:

+-------+-------+-------+
| 'foo' | 'bar' | 'baz' |
+=======+=======+=======+
| 1     | 'A'   | None  |
+-------+-------+-------+
| 2     | 'B'   | None  |
+-------+-------+-------+
| None  | 'C'   | True  |
+-------+-------+-------+
| None  | 'D'   | False |
+-------+-------+-------+

**Discussion**

TODO Arguably not primitive...

**Implementations**

- tabular (rowstack - "The rowstack method can handle the case where
  there are differing column names in the tabarrays being concatenated
  by removing the non-common attributes, filling in with null values,
  or throwing an error" -
  http://packages.python.org/tabular/html/reference/operations.html#row-and-column-operations)
  - ...

Map
---

**Definition**

Map each row in an input table to a new row in the output table. The
mapping is arbitrary, i.e., any function could be defined to perform
the transformation.

**Example**

Input:

+-------+-------+
| 'foo' | 'bar' |
+=======+=======+
| 1     | 'A'   |
+-------+-------+
| 2     | 'B'   |
+-------+-------+

Transformation: Map the input table, such that the output field
'foo_times_2' equals the value of the input field 'foo' multiplied by
2, and the output field 'foo_bars' equals the value of the input field
'bar' repeated 'foo' times.

Output:

+---------------+------------+
| 'foo_times_2' | 'foo_bars' |
+===============+============+
| 2             | 'A'        |
+---------------+------------+
| 4             | 'BB'       |
+---------------+------------+

**Discussion**

N.B., here 'Map' is restricted to a proper mapping of rows, i.e., one
row in, one row out. Other types of transformation where one input row
could result in less than or more than one output row are not included
in the definition of 'Map'.

TODO

**Implementations**

TODO

Melt
----

**Definition**

Given an input table, a set of fields in the input table chosen as
"identifier" fields, and a set of fields chosen as "variable" fields,
generate an output table such that each row in the input is
transformed to *v* rows in the output table, where *v* is the number
of variable fields. 

For each input row, the corresponding *v* output rows will have a copy
of the identifier fields from the input. Variable field names from the
input table are given as values of a single "variable" field in the
output, and values of variable fields from the input table are given
as values of a single "value" field in the output.

**Example**

Input:

+---------+----------+----------+
| 'name'  | 'weight' | 'height' |
+=========+==========+==========+
| 'smith' | 12       | 56       |
+---------+----------+----------+
| 'jones' | 14       | 45       |
+---------+----------+----------+

Transformation: Melt input, with identifier fields ('name') and variable fields ('weight', 'height').

Output:

+---------+------------+---------+
| 'name'  | 'variable' | 'value' |
+=========+============+=========+
| 'smith' | 'weight'   | 12      |
+---------+------------+---------+
| 'smith' | 'height'   | 56      |
+---------+------------+---------+
| 'jones' | 'weight'   | 14      |
+---------+------------+---------+
| 'jones' | 'height'   | 45      |
+---------+------------+---------+

**Discussion**

Based on the R reshape package. TODO

**Implementations**

- R reshape package (melt)
- DataWrangler (fold?)
- Google Refine (not as a single operation, but can be done with transpose ... followed by fill down)
- Pentaho Data Integration (row normaliser?)
- ...

Unmelt
------

**Definition** 

TODO

**Example**

TODO

**Discussion**

TODO

**Implementations**

- R reshape package (cast)
- DataWrangler (unfold?)
- Pentaho Data Integration (row denormaliser?)
- ...

Sort
----

**Definition** 

TODO

**Example**

TODO

**Discussion**

TODO

**Implementations**

- TODO

Convert
-------

**Definition** 

TODO

**Example**

TODO

**Discussion**

TODO

**Implementations**

- TODO

Join
----

**Definition** 

TODO

**Example**

TODO

**Discussion**

TODO

**Implementations**

- TODO

Transpose
---------

**Definition** 

TODO

**Example**

TODO

**Discussion**

TODO

**Implementations**

- TODO

Aggregate
---------

**Definition** 

TODO

**Example**

TODO

**Discussion**

TODO

**Implementations**

- tabular (aggregation -
  http://packages.python.org/tabular/html/reference/operations.html#aggregation)

Pivot
-----

**Definition** 

TODO

**Example**

TODO

**Discussion**

TODO

**Implementations**

- tabular (pivot -
  http://packages.python.org/tabular/html/reference/operations.html#pivot)

Filter
------

**Definition** 

TODO

**Example**

TODO

**Discussion**

TODO

**Implementations**

- TODO

Facet
-----

**Definition** 

TODO

**Example**

TODO

**Discussion**

TODO

**Implementations**

- TODO

FilterValid
-----------

TODO

Stack
-----

**Definition** 

TODO

**Example**

TODO

**Discussion**

TODO

**Implementations**

- tabular (colstack)

Translate
---------

**Definition** 

TODO

**Example**

TODO

**Discussion**

TODO

**Implementations**

- ...

MergeDuplicates
---------------

**Definition**

Using a given key field or set of fields, find rows with the same key,
and merge each group of rows into a single row. Conflicting values
within the same field are resolved with a default strategy where
non-missing values override missing values, otherwise the first value
wins. Optionally use a bespoke conflict resolution strategy.

**Example**

Input:

+-------+-------+-------+
| 'foo' | 'bar' | 'baz' |
+=======+=======+=======+
| 'A'   | 1     | None  |
+-------+-------+-------+
| 'A'   | None  | True  |
+-------+-------+-------+
| 'B'   | None  | True  |
+-------+-------+-------+
| 'B'   | 2     | False |
+-------+-------+-------+

Transformation: MergeDuplicates using key field 'foo', where `None` is
interpreted as a missing value.

Output:

+-------+-------+-------+
| 'foo' | 'bar' | 'baz' |
+=======+=======+=======+
| 'A'   | 1     | True  |
+-------+-------+-------+
| 'B'   | 2     | True  |
+-------+-------+-------+

**Discussion**

TODO

**Implementations**

- TODO

FindDuplicates
--------------

TODO

FindDuplicatesWithConflicts
---------------------------

TODO

FillDown
--------

TODO

FillUp
------

TODO

StringSplit
-----------

**Definition** 

Split string values in a given field, using a given delimiter,
optionally retaining the original field as well.

**Example**

Input:

+-------+
| 'foo' |
+=======+
| 'a,b' |
+-------+
| 'c,d' |
+-------+

Transformation: StringSplit field 'foo' using delimiter ',' placing
the first two results into fields ('bar', 'baz).

Output:

+-------+-------+
| 'bar' | 'baz' |
+=======+=======+
| 'a'   | 'b'   |
+-------+-------+
| 'c'   | 'd'   |
+-------+-------+

**Discussion**
 
'StringSplit' is chosen here because of the correspondance with the
standard Python `string.split` method.

**Implementations**

- TODO

StringJoin
----------

**Definition**

Concatenate string values from multiple fields with an optional
separator.

**Example**

Input:

+-------+-------+
| 'bar' | 'baz' |
+=======+=======+
| 'a'   | 'b'   |
+-------+-------+
| 'c'   | 'd'   |
+-------+-------+

Transformation: StringJoin fields ('bar', 'baz') using separator ','
and place the result in field 'foo'.

Output:

+-------+
| 'foo' |
+=======+
| 'a,b' |
+-------+
| 'c,d' |
+-------+

**Discussion**

'StringJoin' is chosen here because by analogy with the standard
Python `string.join` method.

**Implementations**

- ...

StringFormat
------------

**Definition**

Construct a new field by interpolating values from input rows into a
string template.

**Example**

Input:

+-------+-------+
| 'foo' | 'bar' |
+=======+=======+
| 'A'   | 1     |
+-------+-------+
| 'B'   | 2     |
+-------+-------+

Transformation: StringFormat using template '{foo}:{bar}' and placing
the result in field 'baz'.

Output:

+-------+-------+-------+
| 'foo' | 'bar' | 'baz' |
+=======+=======+=======+
| 'A'   | 1     | 'A:1' |
+-------+-------+-------+
| 'B'   | 2     | 'B:2' |
+-------+-------+-------+

**Discussion**

'StringFormat' chosen here by analogy with the standard Python
`string.format` method.

**Implementations**

- ...

StringReplace
-------------

TODO

StringTranslate
---------------

TODO

StringCapture
-------------

**Definition**

Use a regular expression to search string values in a given field, and
output values from any capturing groups into given fields.

**Example**

Input:

+----------------------------------------------------------------------------------+
| 'foo'                                                                            |
+==================================================================================+
| 'Paris is the capital of France, and has a population of 2,193,031'              |
+----------------------------------------------------------------------------------+
| 'London is the capital of the United Kingdom, and has a population of 7,825,200' |
+----------------------------------------------------------------------------------+

Transformation: StringCapture field 'foo' using regular expression
'^(.+)\\sis\\sthe\\scapital\\sof\\s(.+),.*population\\sof\\s(\\w+)',
placing capturing groups into fields ('city', 'country',
'population').

Output:

+----------+------------------+--------------+
| 'city'   | 'country'        | 'population' |
+==========+==================+==============+
| 'Paris'  | 'France'         | '2,193,031'  |
+----------+------------------+--------------+
| 'London' | 'United Kingdom' | '7,825,200'  |
+----------+------------------+--------------+

**Discussion**

TODO

**Implementations**

- ...

SubstringAfter
--------------

TODO

SubstringBefore
---------------

TODO

StringSplitIntoRows
-------------------

**Definition**

TODO

**Example**

TODO

**Discussion**

TODO

**Implementations**

TODO

StringCaptureIntoRows
---------------------

TODO


Profile
-------

**Definition** 

Generate a report of summary information on a table of data.

**Example**

TODO

**Discussion**

TODO

**Implementations**

- TODO

Validate
--------

**Definition** 

TODO

**Example**

TODO

**Discussion**

TODO

**Implementations**

- TODO





